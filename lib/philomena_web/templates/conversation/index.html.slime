elixir:
  route = fn p -> Routes.conversation_path(@conn, :index, p) end
  pagination = render PhilomenaWeb.PaginationView, "_pagination.html", page: @conversations, route: route, conn: @conn

h1 Mis Conversaciones
.block
  .block__header
    a href=Routes.conversation_path(@conn, :new)
      i.fa.fa-paper-plane>
      ' Crear nueva conversación

    = pagination

  .block__content
    table.table.table--communication-list
      thead
        tr
          th.table--communication-list__name Conversación
          th.table--communication-list__stats Con
          th.table--communication-list__options Opciones
      tbody
        = for {c, count} <- @conversations do
          tr class=conversation_class(@conn.assigns.current_user, c)
            td.table--communication-list__name
              => link c.title, to: Routes.conversation_path(@conn, :show, c)

              .small-text.hide-mobile
                => count
                = pluralize("mensaje", "mensajes", count)
                ' ; started
                = pretty_time(c.created_at)
                ' , last message
                = pretty_time(c.last_message_at)

            td.table--communication-list__stats
              = render PhilomenaWeb.UserAttributionView, "_user.html", object: %{user: other_party(@current_user, c)}, conn: @conn
            td.table--communication-list__options
              => link "Último mensaje", to: last_message_path(@conn, c, count)
              ' &bull;
              => link "Esconder", to: Routes.conversation_hide_path(@conn, :create, c), data: [method: "post"], data: [confirm: "¿Estas realmente seguro?"]

  .block__header.block__header--light
    = pagination
